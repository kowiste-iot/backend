node {
  name = "emqx@node1"
  cookie = "emqxsecretcookie123"
  data_dir = "/opt/emqx/data"
}

# Global maximum packet size setting
max_packet_size = "50kb"

listeners {
  tcp {
    default {
      bind = "0.0.0.0:1883"
      enable_authn = true
      access_rules = ["allow all"]
      # Rate limiting at TCP listener level
      messages_rate = "10/s"
    }
  }
  ws {
    default {
      bind = "0.0.0.0:8083"
      enable_authn = true
      access_rules = ["allow all"]
      # Rate limiting at WebSocket listener level
      messages_rate = "10/s"
    }
  }
  ssl {
    default {
      enable = false
    }
  }
  wss {
    default {
      enable = false
    }
  }
}

dashboard {
  listeners {
    http {
      bind = 18083
    }
  }
  default_username = "admin"
  default_password = "TOYJO67tyu567!"
}

authentication = [
  {
    mechanism = "password_based"
    backend = "postgresql"
    
    password_hash_algorithm {
      name = "sha256"
      salt_position = "suffix"
    }
    
    database = "kowiste"
    username = "mqttuser"
    password = "mqttpass"
    server = "postgres:5432"
    pool_size = 8
    auto_reconnect = true
    
    query = "SELECT password as password_hash, '' as salt, is_superuser FROM mqtt.mqtt_users WHERE username = ${username} LIMIT 1"
  }
]

authorization {
  no_match = deny
  cache {
    enable = true
    max_size = 32
    ttl = 1m
  }
  sources = [
    {
      type = "postgresql"
      enable = true
      server = "postgres:5432"
      database = "kowiste"
      username = "mqttuser"
      password = "mqttpass"
      pool_size = 8
      query = "SELECT allow, ipaddr, username, client_id, access, topic FROM mqtt.mqtt_acls WHERE (ipaddr = ${clientip} OR ipaddr = '*') OR (username = ${username} OR username = '*') OR (clientid = ${clientid} OR client_id = '*')"
    },
    {
      type = "file"
      enable = true
      path = "etc/acl.conf"
    }
  ]
}

allow_anonymous = false

cluster {
  name = "emqx"
  discovery_strategy = manual
}

api_key { bootstrap_file = "/etc/emqx/api_key.bootstrap" }